Strassen's Algorithm (Pseudocode)

// This function will be called if the given matrix length is less than or equal to 2
// This function will be responsible for matrix of 2x2

// Make a function that will accept 2 arrays
// make 3 for loops in order to access the index of a 2d array and also another for loop to insert the product of matrix A and B
function MatrixMultiply(A, B)
	for(i <= 0 to n - 1)
		for(j <= 0 to n - 1)
			C[i,j] <= 0
			for(k <= 0 to n - 1)
				C[i,j] <= C[i,j] + A[i,k] * B[k,j]
	return C



// Main Strassen Function
// this function will check if the given matrix length is less than or equal to 2

// Make a function that will check if the parameters length is less than or equal to 2 if true call the MatrixMultiply function
function strassen(A, B)
	if A.length <= 2 || B. length <= 2
		return MatrixMultiply(A, B)
	
	// Split the matrix to get the individual value for addition
    // deconstruction of Array to split the multidimensional array into single array
	const {a[], b[], c[], d[]} = A
	const {e[], f[], g[], h[]} = B

	// this will solve the individual matrixes that is deconstructed above and store it in a variable for computation
	const ae = strassen(a, e)
	const bg = strassen(b, g)
	const af = strassen(a, f)
	const bh = strassen(b, h)
	const ce = strassen(c, e)
	const dg = strassen(d, g)
	const cf = strassen(c, f)
	const dh = strassen(d, h)
	
	// getting the value of each index in for C matrix
	C00 = ae + bg
	C01 = af + bh
	C11 = ce + dg
	C12 = cf + dh

	C[] = [[C00, C01], [C11],C12]
	
	return C