Strassen Algorithm

Strassen(A,B)

    // Storing the length of Matrix A
    n <= A.length

    // Base Case to check if the length of Matrix A is 1 to do the multiplication
    if n = 1 do
       C[0][0] <= A[0][0] * B[0][0]

    // If the length of A Matrix is more than 1 and it is a power of two it will enter this code block
    else if n is power of two do

        // Split the Matrix A into 4
        A11 <= A[0,0]
        A12 <= A[0,1]
        A21 <= A[1,0]
        A22 <= A[1,1]

        // Split the Matrix B into 4
        B11 <= B[0,0]
        B12 <= B[0,1]
        B21 <= B[1,0]
        B22 <= B[1,1]

        // Recursion to get the value of each point to be ready in getting value of the C matrix
        // Because adding and subtracting matrix is different we need to make a function to do it
        P1 <= Strassen((A11 + A22), (B11 + B22))
        P2 <= Strassen((A21 + A22), B11)
        P3 <= Strassen(A11, (B12 - B22))
        P4 <= Strassen(A22, (b21 - B11))
        P5 <= Strassen((A11 + A12), B22)
        P6 <= Strassen((A21 - A11), (B11 + B12))
        P7 <= Strassen((A12 - A22), (B21 + B22))

        // Formula of Strasssen Algorithm
        C11 <= P + S - T + Y
        C12 <= R + T
        C21 <= Q + S
        C22 <= P + R - Q + U

        // Merge C11, C12, C21, C22 into C Matrix
        C[0][0] <= C11
        C[0][n/2] <= C12
        C[n/2][0] <= C21
        C[n/2][n/2] <= C22

    return C